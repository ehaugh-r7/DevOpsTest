trigger: 
  branches:
    include: 
    - releases/*

pool:
  vmImage: 'ubuntu-latest' # Define the virtual machine image to use for the pipeline


variables:
  terraformVersion: "1.9.2" # Define the Terraform version to ensure consistency across runs
  terraformDownloadUrl: "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip" # URL for Terraform download

jobs:
- job: Rapid7_Docker_IaC_CloudFormation_Scanner
  displayName: 'Rapid7 Docker IaC scanner'
  steps:

  # Configure AWS CLI with access key, secret key, and region
  - script: |
      aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
      aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Configuring AWS CLI Credentials'
    
  # Check if Terraform is already installed, and download it if necessary
  - script: |      
      if [ ! -f /usr/local/bin/terraform ]; then
          wget $(terraformDownloadUrl)
      else
          mv /usr/local/bin/terraform /usr/local/bin/terraform.old
          wget $(terraformDownloadUrl)
      fi
      
      # Unzip and install Terraform
      unzip terraform_$(terraformVersion)_linux_amd64.zip -d terraform_temp
      chmod +x terraform_temp/terraform
      mv terraform_temp/terraform /usr/local/bin/
    displayName: 'Install and initialize Terraform'

  # Initialize Terraform, create a plan, and convert it to JSON
  - script: |
      terraform init
      terraform plan -out tf.plan
      terraform show -json tf.plan > plan.json
    displayName: 'Generate Terraform plan and covert to JSON'
    workingDirectory: $(System.DefaultWorkingDirectory)$(IAC_TEMPLATE_DIR_PATH)

  # Format plan.json to provide position output of violating resources
  - script: |
      jq '.' ./plan.json > formatted_plan.json
      mv formatted_plan.json plan.json
    displayName: "Format Terraform Plan to provide accurate output"
    workingDirectory: $(System.DefaultWorkingDirectory)$(IAC_TEMPLATE_DIR_PATH)

  # Scan the provided IaC Template with the IaC mimics image
  - script: |
      mkdir -p $(System.DefaultWorkingDirectory)/data/mimics-reports
      # Use Docker to run the Mimics tool for scanning
      docker run \
      -v $(System.DefaultWorkingDirectory)$(IAC_TEMPLATE_DIR_PATH):/data \
      -e MIMICS_BASE_URL=$(BASE_URL) \
      -e MIMICS_API_KEY=$(ICS_API_KEY) \
      --name iac-mimics-container \
      public.ecr.aws/rapid7-insightcloudsec/ics/mimics:latest scan /data/plan.json --no-verify --ics-config "Test configuration" --log-format json --report-formats all --report-name results-rapid7_iac --report-path "/data/mimics-reports" --save-report --no-fail --verbose
    displayName: 'Scan IaC files with Mimics'

  # Copy mimics reports from docker container to host
  - script: |
      docker cp iac-mimics-container:data/mimics-reports $(System.DefaultWorkingDirectory)/data
    displayName: Copy Mimics Reports from Docker Container to Host

  #Â Create Azure Devops work items for each finding produced by the IaC Mimics scan
  # If you do not wish to have work items created for each scan finding, remove the below step
  - script: |
      # Azure DevOps details - configure with your organization and project names
      organization="ehaugh"
      project="Local"

      # Construct the URL for API requests, choosing the correct work item type and API version.
      url="https://dev.azure.com/${organization}/${project}/_apis/wit/workitems/\$Issue?api-version=6.0"

      # Specify the path to the SARIF file generated by the IaC Scan
      sarifFile="$(System.DefaultWorkingDirectory)/data/mimics-reports/results-rapid7_iac.sarif"

      # Check for the existence of the SARIF file and process it
      if [ -f "$sarifFile" ]; then
        echo "Found SARIF file: $sarifFile"

        # Iterate through each result in the SARIF file, extracting relevant details
        jq -c '.runs[].results[]' "$sarifFile" --arg project $project | while read -r result; do
          ruleId=$(jq -r ".ruleId" <<< $result)
          message=$(jq -r ".message.text" <<< $result)
          locations=$(jq -r '.locations[]' <<< $result)
          title=$(jq -c --arg ruleId "$ruleId" '.runs[].tool.driver.rules[] | select(.id == $ruleId).name' "$sarifFile")

          # Prepare a JSON payload for creating a new work item via the Azure DevOps REST API
          json=$(jq --arg ruleId "$ruleId" --arg message "$message" --arg title "$title" --arg project $project '
            [
              {"op": "add", "path": "/fields/System.Title", "value": $title},
              {"op": "add", "path": "/fields/System.Description", "value": "<div>\($message)</div><pre style=\"white-space: pre-line\">\(.properties.changes)</pre>"},
              {"op": "add", "path": "/fields/System.State", "value": "To Do"},
              {"op": "add", "path": "/fields/System.AreaPath", "value": $project}
            ]
          ' <<< $locations)

          # Make an API call to create a new work item with the prepared payload
          curl -X POST -H "Content-Type: application/json-patch+json" -H "Authorization: Basic $(echo -n ":$PAT" | base64)" -d "$json" "$url"
        done
      else
        echo "SARIF file not found: $sarifFile"
      fi
    displayName: "Process SARIF and Create Azure Board Work Items"
    env:
      PAT: $(PAT) # Pass the Personal Access Token (PAT) securely as an environment variable

  # Publish additional files (results-rapid7_iac artifacts)
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Scan Artifacts'
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/data/mimics-reports'
      artifactName: 'results-rapid7_iac'

  # Publish the HTML report using the PublishHtmlReport task
  - task: PublishHtmlReport@1
    displayName: 'Publish HTML Report'
    condition: succeededOrFailed()
    inputs:
      reportDir: $(System.DefaultWorkingDirectory)/data/mimics-reports/results-rapid7_iac.html
      tabName: 'R7 IaC Scan Results'